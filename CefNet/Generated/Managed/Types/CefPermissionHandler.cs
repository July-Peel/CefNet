// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_permission_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Implement this structure to handle events related to permission requests. The
	/// functions of this structure will be called on the browser process UI thread.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefPermissionHandler : CefBaseRefCounted<cef_permission_handler_t>, ICefPermissionHandlerPrivate
	{
#if NET_LESS_5_0
		private static readonly OnRequestMediaAccessPermissionDelegate fnOnRequestMediaAccessPermission = OnRequestMediaAccessPermissionImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefPermissionHandler Create(IntPtr instance)
		{
			return new CefPermissionHandler((cef_permission_handler_t*)instance);
		}

		public CefPermissionHandler()
		{
			cef_permission_handler_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->on_request_media_access_permission = (void*)Marshal.GetFunctionPointerForDelegate(fnOnRequestMediaAccessPermission);
			#else
			self->on_request_media_access_permission = (delegate* unmanaged[Stdcall]<cef_permission_handler_t*, cef_browser_t*, cef_frame_t*, cef_string_t*, uint, cef_media_access_callback_t*, int>)&OnRequestMediaAccessPermissionImpl;
			#endif
		}

		public CefPermissionHandler(cef_permission_handler_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefPermissionHandlerPrivate.AvoidOnRequestMediaAccessPermission();

		/// <summary>
		/// Called when a page requests permission to access media. |requesting_url| is
		/// the URL requesting permission. |requested_permissions| is a combination of
		/// values from cef_media_access_permission_types_t that represent the
		/// requested permissions. Return true (1) and call
		/// cef_media_access_callback_t::cont() either in this function or at a later
		/// time to continue or cancel the request. Return false (0) to cancel the
		/// request immediately. This function will not be called if the &quot;--enable-
		/// media-stream&quot; command-line switch is used to grant all permissions.
		/// </summary>
		protected internal unsafe virtual bool OnRequestMediaAccessPermission(CefBrowser browser, CefFrame frame, string requestingUrl, uint requestedPermissions, CefMediaAccessCallback callback)
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate int OnRequestMediaAccessPermissionDelegate(cef_permission_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_string_t* requesting_url, uint requested_permissions, cef_media_access_callback_t* callback);

#endif // NET_LESS_5_0
		// int (*)(_cef_permission_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, const cef_string_t* requesting_url, uint32 requested_permissions, _cef_media_access_callback_t* callback)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe int OnRequestMediaAccessPermissionImpl(cef_permission_handler_t* self, cef_browser_t* browser, cef_frame_t* frame, cef_string_t* requesting_url, uint requested_permissions, cef_media_access_callback_t* callback)
		{
			var instance = GetInstance((IntPtr)self) as CefPermissionHandler;
			if (instance == null || ((ICefPermissionHandlerPrivate)instance).AvoidOnRequestMediaAccessPermission())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)browser);
				ReleaseIfNonNull((cef_base_ref_counted_t*)frame);
				ReleaseIfNonNull((cef_base_ref_counted_t*)callback);
				return default;
			}
			return instance.OnRequestMediaAccessPermission(CefBrowser.Wrap(CefBrowser.Create, browser), CefFrame.Wrap(CefFrame.Create, frame), CefString.Read(requesting_url), requested_permissions, CefMediaAccessCallback.Wrap(CefMediaAccessCallback.Create, callback)) ? 1 : 0;
		}
	}
}
